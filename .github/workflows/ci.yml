name: sfap-ci

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  host-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix: { cc: [gcc, clang] }
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update && sudo apt-get install -y cmake ninja-build g++ clang
      - name: Configure
        run: |
          if [[ "${{ matrix.cc }}" == "gcc" ]]; then export CC=gcc CXX=g++; else export CC=clang CXX=clang++; fi
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DSFAP_BUILD_TESTS=ON
      - name: Build & Test
        run: cmake --build build && ctest --test-dir build --output-on-failure

  host-windows-msvc:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure (MSVC)
        run: cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DSFAP_BUILD_TESTS=ON
      - name: Build & Test
        run: cmake --build build && ctest --test-dir build --output-on-failure

  host-windows-msys2:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
      - name: Build & Test (MinGW)
        shell: msys2 {0}
        run: |
          export CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DSFAP_BUILD_TESTS=ON
          cmake --build build
          ctest --test-dir build --output-on-failure